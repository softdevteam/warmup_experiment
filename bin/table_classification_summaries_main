#!/usr/bin/env python2.7

"""Generate the TeX code for a summary statistics table.
Must be run after mark_changepoints_in_json.
"""

import argparse
import os
import os.path
import sys
import math

sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "warmup_stats"))
from warmup.krun_results import parse_krun_file_with_changepoints
from warmup.latex import end_document, end_table, get_latex_symbol_map, preamble
from warmup.latex import start_table, STYLE_SYMBOLS
from warmup.summary_statistics import collect_summary_statistics, convert_to_latex


# The miniumum number of rows for each benchmark section in the table. If the
# data is for fewer VMs, then the section will be padded with blank rows.
MIN_VM_ROWS = 6

VM_NAMES_MAP = {
    'JRubyTruffle': 'TruffleRuby',
    'Hotspot': 'HotSpot'
}

BENCHMARK_NAMES_MAP = {
    'binarytrees': '\\binarytrees',
    'nbody': '\\nbody',
    'fannkuch_redux': '\\fannkuch',
    'richards': '\\richards',
    'fasta': '\\fasta',
    'spectralnorm': '\\spectralnorm',
}

TITLE = 'Summary of benchmark classifications'
TABLE_FORMAT = 'll@{\hspace{0cm}}ll@{\hspace{-1cm}}r@{\hspace{0cm}}r@{\hspace{0cm}}r@{\hspace{0cm}}l@{\hspace{.3cm}}ll@{\hspace{-1cm}}r@{\hspace{0cm}}r@{\hspace{0cm}}r'
TABLE_HEADINGS_START1 = '\\multicolumn{1}{c}{\\multirow{2}{*}{}}&'
TABLE_HEADINGS_START2 = '&'
TABLE_HEADINGS1 = '&&\\multicolumn{1}{c}{} &\\multicolumn{1}{c}{Steady}&\\multicolumn{1}{c}{Steady}&\\multicolumn{1}{c}{Steady}'
TABLE_HEADINGS2 = '&&\\multicolumn{1}{c}{Class.} &\\multicolumn{1}{c}{iter (\#)} &\\multicolumn{1}{c}{iter (s)}&\\multicolumn{1}{c}{perf (s)}'

BLANK_CELL = '\\begin{minipage}[c][\\blankheight]{0pt}\\end{minipage}'


def write_latex_table(machine, all_benchs, summary, steady_state, tex_file,
                      with_preamble=False):
    """Write a tex table to disk.
    This script has its own version of the write_latex_table function, in which
    each VM is a separate row, and benchmarks are grouped together (not the other
    way around).
    """

    num_splits = 2  # 2 sets of VMs in each table

    num_benchmarks = len(all_benchs)
    num_vms = len(summary)

    # decide how to lay out the splits
    num_benchs_rounded = \
        int(math.ceil(num_benchmarks / float(num_splits)) * num_splits)
    benchs_per_split = int(num_benchs_rounded / float(num_splits))
    splits = [[] for x in xrange(num_splits)]
    bench_num = 0
    split_idx = 0
    for bench_idx in xrange(num_benchs_rounded):
        if bench_idx < len(all_benchs):
            bench = all_benchs[bench_idx]
        else:
            bench = None  # no content in that cell
        splits[split_idx].append(bench)
        bench_num += 1
        if bench_num % benchs_per_split == 0:
            split_idx += 1

    with open(tex_file, 'w') as fp:
        if with_preamble:
            fp.write(preamble(TITLE))
            fp.write('\\centering %s' % get_latex_symbol_map())
            fp.write('\n\n\n')
            fp.write('\\begin{landscape}\n')
            fp.write('\\begin{table*}[hptb]\n')
            fp.write('\\vspace{.8cm}\n')
            fp.write('\\begin{adjustbox}{totalheight=12.4cm}\n')
        # emit table header
        heads1 = TABLE_HEADINGS_START1 + '&'.join([TABLE_HEADINGS1] * num_splits)
        heads2 = TABLE_HEADINGS_START2 + '&'.join([TABLE_HEADINGS2] * num_splits)
        heads = '%s\\\\%s' % (heads1, heads2)
        fp.write(start_table(TABLE_FORMAT, heads))
        split_row_idx = 0
        for row_benchs in zip(*splits):
            vm_idx = 0
            for vm in sorted(summary.keys()):
                row = []
                for bench in row_benchs:
                    if bench is None:
                        continue # no more results
                    try:
                        this_summary = summary[vm][bench]
                    except KeyError:
                        last_cpt = BLANK_CELL
                        time_steady = BLANK_CELL
                        last_mean = BLANK_CELL
                        classification = ''
                    else:
                        classification = this_summary['style']
                        last_cpt = this_summary['last_cpt']
                        time_steady = this_summary['time_to_steady_state']
                        last_mean = this_summary['last_mean']

                        classification = '\\multicolumn{1}{l}{%s}' % classification
                        if classification == STYLE_SYMBOLS['flat']:
                            last_cpt = BLANK_CELL
                            time_steady = BLANK_CELL
                    if last_cpt == '':
                        last_cpt = BLANK_CELL
                    if time_steady == '':
                        time_steady = BLANK_CELL
                    if last_mean == '':
                        last_mean = BLANK_CELL

                    if vm_idx == 0:
                        if num_vms == 8:
                            fudge = 2
                        elif num_vms == 5:
                            fudge = 1
                        else:
                            fudge = 0
                        try:
                            bench_cell = '\\multirow{%s}{*}{\\rotatebox[origin=c]{90}{%s}}' \
                                % (num_vms + fudge, BENCHMARK_NAMES_MAP[bench])
                        except KeyError:
                            bench_cell = '\\multirow{%s}{*}{\\rotatebox[origin=c]{90}{%s}}' \
                                % (num_vms + fudge, bench)
                    else:
                        bench_cell = ''
                    row_add = [BLANK_CELL, bench_cell, classification, last_cpt,
                               time_steady, last_mean]
                    if not row:  # first vm in this row, needs the vm column
                        if VM_NAMES_MAP.has_key(vm):
                            row.insert(0, VM_NAMES_MAP[vm])
                        else:
                            row.insert(0, vm)
                    row.extend(row_add)
                    bench_idx += 1
                fp.write('&'.join(row))
                # Only -ve space row if not next to a midrule
                if vm_idx < num_vms - 1:
                    fp.write('\\\\[-3pt] \n')
                else:
                    fp.write('\\\\ \n')
                vm_idx += 1
            while vm_idx < MIN_VM_ROWS:
                fp.write('\\\\ \n')
                vm_idx += 1
            if split_row_idx < benchs_per_split - 1:
                fp.write('\\midrule\n')
            split_row_idx += 1
        fp.write(end_table())
        if with_preamble:
            fp.write('\\end{adjustbox}\n')
            fp.write('\\end{table*}\n')
            fp.write('\\end{landscape}\n')
            fp.write(end_document())


def create_cli_parser():
    """Create a parser to deal with command line switches."""

    script = os.path.basename(__file__)
    description = (('Summarise benchmark classifications stored within a Krun ' +
                    'results file. Must be run after mark_changepoints_in_json.' +
                    '\n\nExample usage:\n\n' +
                    '\t$ python %s -o summary.tex results.json.bz2') % script)
    parser = argparse.ArgumentParser(description=description,
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('json_files', action='append', nargs='+', default=[],
                        type=str, help='One or more Krun result files.')
    parser.add_argument('--outfile', '-o', action='store', dest='latex_file',
                        type=str, help='Name of the LaTeX file to write to.',
                        required=True)
    parser.add_argument('--with-preamble', action='store_true',
                        dest='with_preamble', default=False,
                        help='Write out a whole LaTeX article (not just the table).')
    return parser


if __name__ == '__main__':
    parser = create_cli_parser()
    options = parser.parse_args()
    classifier, data_dcts = parse_krun_file_with_changepoints(options.json_files[0])
    if options.with_preamble:
        print 'Writing out full document, with preamble.'
    summary_data = collect_summary_statistics(data_dcts, classifier['delta'], classifier['steady'])
    machine, bmarks, latex_summary = convert_to_latex(summary_data, classifier['delta'], classifier['steady'])
    print('Writing data to: %s.' % options.latex_file)
    write_latex_table(machine, bmarks, latex_summary, classifier['steady'],
                      options.latex_file, with_preamble=options.with_preamble)
