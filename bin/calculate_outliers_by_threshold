#!/usr/bin/env pypy

"""
Calculate the effect of passing different values of -w to mark_outliers_in_json.
MUST be run before plot_outliers_by_threshold.
"""

import argparse
import bz2
import json
import os
import sys

sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "warmup_stats"))
from warmup.krun_results import read_krun_results_file
from warmup.outliers import get_all_outliers, get_outliers


FILENAME = 'outliers_per_threshold.json.bz2'
WINDOWS = [25, 50, 100, 200, 300, 400]


def sum_outliers(data):
    num_outliers = 0
    for outliers in data:
        num_outliers += len(outliers)
    return num_outliers


def create_cli_parser():
    """Create a parser to deal with command line switches.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('json_files', nargs='+', action='append', default=[],
                        type=str, help='One or more Krun result files.')
    return parser


def main(in_files):
    krun_data = dict()
    for filename in in_files:
        assert os.path.exists(filename), 'File %s does not exist.' % filename
        print('Loading: %s' % filename)
        krun_data[filename] = read_krun_results_file(filename)
    # Get number of executions per benchmark, must be the same for all files!
    bench_1 = krun_data[filename]['wallclock_times'].keys()[0]  # Name of first benchmark.
    n_execs = len(krun_data[filename]['wallclock_times'][bench_1])
    print ('ASSUMING %d process executions per vm:benchmark:variant '
           'in ALL files.' % n_execs)
    # Scaffold results dictionary.
    outliers_per_thresh = dict()
    for window in WINDOWS:
        outliers_per_thresh[window] = dict()
        for threshold in xrange(1, n_execs):
            outliers_per_thresh[window][threshold] = {'all_outliers': 0,
                              'common_outliers': 0, 'unique_outliers': 0}
    # Calculate numbers of outliers for each window / threshold.
    for filename in in_files:
        for window in outliers_per_thresh:
            for thresh in outliers_per_thresh[window]:
                print 'Window %d, threshold %d, file %s' % (window, thresh, filename)
                outliers_per_key = dict()  # All executions for a vm:bench:variant
                for key in krun_data[filename]['wallclock_times']:
                    outliers_per_key[key] = list()  # Outliers for each execution
                    for p_exec in krun_data[filename]['wallclock_times'][key]:
                        outliers_per_key[key].append(get_all_outliers(p_exec, window))
                    common, unique = get_outliers(outliers_per_key[key], window, thresh)
                    outliers_per_thresh[window][thresh]['all_outliers'] += sum_outliers(outliers_per_key[key])
                    outliers_per_thresh[window][thresh]['common_outliers'] += sum_outliers(common)
                    outliers_per_thresh[window][thresh]['unique_outliers'] += sum_outliers(unique)
    with bz2.BZ2File(FILENAME, 'w') as f:
        f.write(json.dumps(outliers_per_thresh, indent=1, sort_keys=True,
                           encoding='utf-8'))


if __name__ == '__main__':
    if sys.subversion[0] != 'PyPy':
        print('WARNING: This script is designed to run efficiently with the '
              'PyPy interpreter.\nIt is likely to run very slowly on other VMs.')
    parser = create_cli_parser()
    options = parser.parse_args()
    main(options.json_files[0])
